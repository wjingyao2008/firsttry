//From: ftp://ftp.3gpp.org/Specs/2005-03/Rel-6/32_series/32673-620.zip
//File: StateManagementIRPConstDefs.idl

#ifndef StateManagementIRPConstDefs_idl
#define StateManagementIRPConstDefs_idl

#include "CosNotification.idl"
#include "ManagedGenericIRPConstDefs.idl"

// This statement must appear after all include statements
#pragma prefix "3gppsa5.org"

/* ## Module: StateManagementIRPConstDefs
This module contains commonly used definitions for State Management IRP
========================================================================
*/
module StateManagementIRPConstDefs
{
/*
  Constant definitions for state management notifications uses when populating the
  Cos::Structured event.
  The "name" party of the structured event carries the following constant definitions
  appropriate to the state being notified.
  Refer to TS 32.663 regarding how to populate the structured event
*/
   interface AttributeNameValue {
      const string OPERATIONAL_STATE    = "operationalState";
      const string USAGE_STATE          = "usageState";
      const string ADMINISTRATIVE_STATE = "administrativeState";
      const string ALARM_STATUS         = "alarmStatus";
      const string PROCEDURAL_STATUS    = "proceduralStatus";
      const string AVAILABILITY_STATUS  = "availabilityStatus";
      const string CONTROL_STATUS       = "controlStatus";
      const string STANDBY_STATUS       = "standbyStatus";
      const string UNKNOWN_STATUS       = "unknownStatus";
   };

   /*
   Definition of Operational State based on X.721 [3], if mandatory.
   */
   enum OperationalState
   {
      Disabled, Enabled
   };

   /*
   Definition of Usage State based on X.721 [3], if mandatory.
   */
   enum UsageState
   {
      Idle, Active, Busy
   };

   /*
   Definition of Administrative State based on X.721 [3], if mandatory.
   */
   enum AdministrativeState
   {
      Locked, Unlocked, ShuttingDown
   };

   /*
   Definition of Alarm Status based on M.3100 [4], if mandatory.
   */
   enum AlarmStatusValues
   {
      CLEARED, INDETERMINATE, WARNING, MINOR, MAJOR, CRITICAL
   };
   typedef sequence <AlarmStatusValues,5> AlarmStatus;

   /*
   Definition of Procedural Status based on X.721 [3], if mandatory.
   */
   enum ProceduralStatusValues
   {
      InitializationRequired, NotInitialized, Initializing, Reporting, 
      Terminating
   };
   typedef sequence <ProceduralStatusValues,5> ProceduralStatus;

   /*
   Definition of Availability Status based on X.721 [3], if mandatory.
   */
   enum AvailabilityStatusValues
   {
      InTest, Failed, PowerOff, OffLine, OffDuty, Dependency, Degraded, 
      NotInstalled, LogFull
   };
   typedef sequence <AvailabilityStatusValues,9> AvailabilityStatus;

   /*
   Definition of Control Status based on X.721 [3], if mandatory.
   */
   enum ControlStatusValues
   {
      SubjectToTest, PartOfServicesLocked, ReservedForTest, Suspended
   };
   typedef sequence <ControlStatusValues,4> ControlStatus;

   /*
   Definition of Standby Status based on X.721 [3], if mandatory.
   */
   enum StandbyStatus
   {
      HotStandby, ColdStandby, ProvidingService
   };

   /*
   Definition of Unknown Status based on X.721 [3], if mandatory
   (if switch is TRUE then value equal to TRUE implies "unknown status").
   */
   union UnknownStatus switch(boolean)
   {
      case TRUE: boolean value;
   };

};
#endif

